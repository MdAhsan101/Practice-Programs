Ques:
Given an array of size n and a range [a, b]. 
The task is to partition the array around the range such that array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array

void threeWayPartition(vector<int>& array,int a, int b)
    {
        // code here 
        int n=array.size();
        int l=0,r=n-1;
        int i=0;
        while(i<=r)
        {
            if(array[i]<a)
            {
                swap(array[l],array[i]);
                l++; i++;
            }
            else if(array[i]>b)
            {
                swap(array[r],array[i]);
                r--;
            }
            else
            {
                i++;
            }
        }
    }